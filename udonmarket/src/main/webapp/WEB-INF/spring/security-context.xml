<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">


	<!-- 암호화 처리 -->
	<beans:bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"
		  id="bcryptPasswordEncoder"/>
		  
<!-- 	사용자 요청 url 관련 설정 -->
<!-- 	intercept-url : 위에는 특별한 설정, 아래는 일반적인 설정배치 -->
	<http auto-config="true">
		<intercept-url pattern="/" access="permitAll"/>
		<intercept-url pattern="/index.jsp" access="permitAll"/>
		<intercept-url pattern="/resources/**" access="permitAll"/>
		<intercept-url pattern="/webSocket/**" access="permitAll"/>
		<intercept-url pattern="/member/mypage" access="isAuthenticated()"/>		
		<intercept-url pattern="/member/**" access="permitAll"/>
		<intercept-url pattern="/admin/**" access="hasRole('ADMIN')"/>
		<intercept-url pattern="/**" access="hasRole('USER')"/>

		
<!-- 		login-processing-url : 로그인폼 제출 url  핸들러메소드 필요없음.-->
<!-- 			authentication-failure-forward-url : 인증 성공 후 처리과정 작성 쿠키관련 처리-->
<!-- 			authentication-success-forward-url : 인증 실패 후 처리과정 작성 (사용자 피드백 작성)-->
		<form-login
			login-page="/member/loginForm"
			login-processing-url="/member/login"
			username-parameter="userId"
			password-parameter="password"
			authentication-success-forward-url="/member/memberLoginSuccess.do"
			authentication-failure-forward-url="/member/memberLoginFailure"
			default-target-url="/"
		/>
		
<!-- 		logout-url: 로그아웃 처리 url. 핸들러메소드 필요없음. -->
		<logout
			logout-url="/member/logout"
			logout-success-url="/"
		/>
		
<!-- 		모든 POST 요청에 csrf 토큰값 인증사용 -->
 		<!-- <csrf disabled="true"/> -->
	</http>
	
<!-- 	사용자 인증 -->
	<authentication-manager>
			<authentication-provider ref="memberAuthProvider"/>
<!-- 		2.UserDetails 구현체를 통해 DB에서 인증하기 -->
			<authentication-provider user-service-ref="securityService">
				<password-encoder ref="bcryptPasswordEncoder"/>	
			</authentication-provider>
	</authentication-manager>
	
	
	<beans:bean id="securityService" class="com.kh.security.model.service.SecurityService"/>
	<beans:bean id="memberAuthProvider" class="com.kh.security.model.service.CustomAuthenticationProvider"/>
	
	
<!-- 	Service, DAO 빈 관리용 -->
	<context:component-scan base-package="com.kh.security"/>
</beans:beans>
