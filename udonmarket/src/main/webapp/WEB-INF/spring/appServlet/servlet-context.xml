<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.kh.udon" />
	
	<!-- file updload -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver"></beans:bean>
		
	 <!-- WebSocket -->
	 <!-- webSocket을 조작할 자바 클래스 파일 경로 -->
    <beans:bean id="WebSocketHandler" class="com.kh.udon.common.websocket.WebSocketHandler" />
    
    <!-- handshake-inertceptors : session 사용 시 필요 -->
    <!-- httpSession을 WebSoketSession에 전달 : ws에서 session에 접근 할 수 있다-->
    <websocket:handlers>
    	<websocket:mapping handler="WebSocketHandler" path="/webSocket"/>
    	<websocket:handshake-interceptors>
    		<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
    	</websocket:handshake-interceptors>
    	
    	<websocket:sockjs/>
    </websocket:handlers>
    <!-- WebSocket -->

	<!-- 	jsonView 빈 등록 및 BeanNameViewResolver 등록 -->
	<beans:bean class="net.sf.json.spring.web.servlet.view.JsonView"
				id="jsonView"/>
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver"
				id="viewResolver">
			<beans:property name="order" value="1"/>
				
	</beans:bean>
	
<!-- 	회원가입 메일 인증(gmail) -->
	<beans:bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="host" value="smtp.gmail.com" />
		<beans:property name="port" value="587" />
		<beans:property name="defaultEncoding" value="utf-8" />
		<beans:property name="username"  value="dkxoxo123@gmail.com"/>
		<beans:property name="password"  value="dlxogml12!"/>
		<beans:property name="javaMailProperties">
			<beans:props>
				<beans:prop key="mail.transport.protocol">smtp</beans:prop>
				<beans:prop key="mail.smtp.auth">true</beans:prop>
				<beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
				<beans:prop key="mail.debug">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="emailVo" class="com.kh.email.Email"/>
	<beans:bean id="emailSender" class="com.kh.email.EmailSender"/>


	
	
	
	<!-- aop 어노테이션 처리용  -->
	<!-- root-context의 transaction관련 빈 설정을 가져와서 적용 -->
	<aop:aspectj-autoproxy/>
	
	
</beans:beans>
